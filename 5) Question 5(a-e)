Question 5) Space required to store any two-dimensional array is 𝑛𝑢𝑚𝑏𝑒𝑟 𝑜ƒ 𝑟𝑜𝑤𝑠 × 𝑛𝑢𝑚𝑏𝑒𝑟 𝑜ƒ
𝑐𝑜𝑙𝑢𝑚𝑛𝑠. Assuming array is used to store elements of the following matrices, implement an
efficient way that reduces the space requirement.
(a) Diagonal Matrix.
(b) Tri-diagonal Matrix.
(c) Lower triangular Matrix.
(d) Upper triangular Matrix.
(e) Symmetric Matrix 


Answer 5(a)

#include <iostream>
using namespace std;

class DiagonalMatrix {
private:
    int *arr;
    int n; 
public:
    DiagonalMatrix(int size) {
        n=size;
        arr=new int[n];
        for (int i=0; i<n; i++)
            arr[i] = 0;
    }
    void set(int i, int j, int value) {
        if (i==j) {
            arr[i-1] = value;
        }
    }
    int get(int i, int j) {
        if (i==j) {
            return arr[i-1];
        } else {
            return 0;
        }
    }
    void display() {
        for (int i=1; i<=n; i++) {
            for (int j=1; j<=n; j++) {
                if (i==j)
                    cout << arr[i-1] << " ";
                else
                    cout << "0 ";
            }
            cout << endl;
        }
    }
    ~DiagonalMatrix() {
        delete[] arr;
    }
};
int main() {
    int n;
    cout << "Enter dimension of matrix: ";
    cin >> n;

    DiagonalMatrix dm(n);
    cout << "Enter diagonal elements:\n";
    for (int i = 1; i <= n; i++) {
        int value;
        cin >> value;
        dm.set(i, i, value);
    }
    cout << "\nDiagonal Matrix:\n";
    dm.display();
    return 0;
}


Answer 5(b)

#include <iostream>
using namespace std;

class TriDiagonal {
private:
    int *arr;
    int n;    

public:
    TriDiagonal(int size) {
        n= size;
        arr= new int[3*n-2];
        for (int i=0; i<3*n-2; i++) arr[i] = 0;
    }
    void set(int i, int j, int value) {
        if (i-j==1) { 
            arr[i-2]= value;
        } else if(i-j== 0) { 
            arr[(n-1)+(i-1)]= val;
        } else if(i-j== -1) { 
            arr[(2*n-1)+(i-1)]= val;
        }
    }

    int get(int i, int j) {
        if (i-j== 1) {
            return arr[i-2];
        } else if(i-j== 0) {
            return arr[(n-1)+(i-1)];
        } else if(i-j== -1) {
            return arr[(2*n-1)+(i-1)];
        } else{
            return 0;
        }
    }
    void display() {
        for (int i=1; i<=n; i++) {
            for (int j=1; j<=n; j++) {
                cout << get(i, j) << " ";
            }
            cout << endl;
        }
    }
    TriDiagonal() {
        delete[] arr;
    }
};
int main() {
    int n;
    cout << "Enter dimension of matrix: ";
    cin >> n;
    
    TriDiagonal td(n);
    cout << "Enter the elements row by row:\n";
    for (int i=1; i<=n; i++) {
        for (int j=1; j<=n; j++) {
            int value;
            cin >> value;
            td.set(i, j, value);
        }
    }
    cout << "\nTri-Diagonal Matrix:\n";
    td.display();
    return 0;
}

Answer 5(c)

#include <iostream>
using namespace std;

class LowerTriangular {
private:
    int *arr;
    int n; 
public:
    LowerTriangular(int size) {
        n = size;
        arr = new int[n * (n + 1) / 2];
        for (int i = 0; i < n * (n + 1) / 2; i++) 
             arr[i] = 0;
    }
    int index(int i, int j) {
        return (i*(i-1))/2 + (j-1);
    }
    void set(int i, int j, int value) {
        if(i>=j) {
            arr[index(i,j)] = value;
        }
    }
    int get(int i, int j) {
        if (i>=j) {
            return arr[index(i,j)];
        } else {
            return 0;
        }
    }
    void display() {
        for (int i=1; i<=n; i++) {
            for (int j=1; j<=n; j++) {
                cout << get(i, j) << " ";
            }
            cout << endl;
        }
    }
     LowerTriangular() {
        delete[] arr;
    }
};
int main() {
    int n;
    cout << "Enter dimension of matrix: ";
    cin >> n;
    LowerTriangular lt(n);

    cout << "Enter the elements row by row:\n";
    for (int i=1; i<=n; i++) {
        for (int j=1; j<=n; j++) {
            int value;
            cin >> value;
            lt.set(i, j, value);
        }
    }
    cout << "\nLower Triangular Matrix:\n";
    lt.display();
    return 0;
}


Answer 5(d)

#include <iostream>
using namespace std;

class UpperTriangular {
private:
    int *arr;
    int n;

public:
    UpperTriangular(int size) {
        n= size;
        arr= new int[n*(n+1)/2]; 
        for (int i=0; i<n*(n+1)/2; i++) 
            arr[i]= 0;
    }
    int index(int i, int j) {
        return (i-1)*n-((i-2)*(i-1))/2+(j-i);
    }
    void set(int i, int j, int value) {
        if (i<=j) {
            arr[index(i, j)] = value;
        }
    }
    int get(int i, int j) {
        if (i<=j) {
            return arr[index(i, j)];
        } else{
            return 0;
        }
    }

    void display() {
        for(int i=1; i<=n; i++) {
            for (int j= 1; j<=n; j++) {
                cout << get(i, j) << " ";
            }
            cout << endl;
        }
    }
    UpperTriangular() {
        delete[] arr;
    }
};
int main() {
    int n;
    cout << "Enter dimension of matrix: ";
    cin >> n;

    UpperTriangular ut(n);
    cout << "Enter the elements row by row:\n";
    for (int i=1; i<=n; i++) {
        for (int j=1; j<=n; j++) {
            int value;
            cin >> value;
            ut.set(i, j, value);
        }
    }
    cout << "\nUpper Triangular Matrix:\n";
    ut.display();
    return 0;
}


Answer 5(e)

#include <iostream>
using namespace std;

class SymmetricMatrix {
private:
    int *arr;
    int n;

public:
    SymmetricMatrix(int size) {
        n= size;
        arr= new int[n*(n+1)/2];
        for(int i= 0; i<n*(n+1)/2; i++)
        arr[i]= 0;
    }
    int index(int i, int j) {
        return (i*(i-1))/2+(j-1);
    }
    void set(int i, int j, int value) {
        if (i>=j)
            arr[index(i, j)] = value;
        else
            arr[index(j, i)] = value;
    }
    int get(int i, int j) {
        if (i >= j)
            return arr[index(i,j)];
        else
            return arr[index(j,i)];
    }
    void display() {
        for (int i=1;i<=n; i++) {
            for (int j=1; j<=n; j++) {
                cout << get(i,j) << " ";
            }
            cout << endl;
        }
    }
    SymmetricMatrix() {
        delete[] arr;
    }
};
int main() {
    int n;
    cout << "Enter dimension of matrix: ";
    cin >> n;

    SymmetricMatrix sm(n);
    cout << "Enter the elements row by row:\n";
    for (int i=1; i<=n; i++) {
        for (int j=1; j<=n; j++) {
            int value;
            cin >> value;
            sm.set(i, j, value);
        }
    }
    cout << "\nSymmetric Matrix:\n";
    sm.display();
    return 0;
}
